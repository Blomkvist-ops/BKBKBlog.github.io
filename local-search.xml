<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2023/07/22/test/"/>
    <url>/2023/07/22/test/</url>
    
    <content type="html"><![CDATA[<p>tedfghgfd</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/07/22/hello-world/"/>
    <url>/2023/07/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Parametrzied hell</title>
    <link href="/2022/08/23/Parametrized-hell/"/>
    <url>/2022/08/23/Parametrized-hell/</url>
    
    <content type="html"><![CDATA[<p>I was trying to parametrize the table name and field name as there were different tables but similar query. The code looked like below.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">string</span> sql = @<span class="hljs-string">&quot;SELECT * FROM @table_name;&quot;</span><br><span class="hljs-keyword">command</span>.Parameters.Add(new SqlParameter(<span class="hljs-string">&quot;@table_name&quot;</span>, System.Data.SqlDbType.<span class="hljs-keyword">String</span>));<br><span class="hljs-keyword">command</span>.Parameters[<span class="hljs-string">&quot;@table_name&quot;</span>].Value = <span class="hljs-string">&quot;tableName&quot;</span>;<br></code></pre></td></tr></table></figure><p>The tricky thing is that when you try to parametrize the table names or field names, there will be no error or exception being caught. It just won’t output anything while the program is still running, which is very weird and confusing. After spending several hours exploring and checking my other existed code, I found this problem and realized I’d better not do this.</p><p>Technically you can implement this with dynamic sql query (<a href="https://stackoverflow.com/questions/2838490/a-table-name-as-a-variable">https://stackoverflow.com/questions/2838490/a-table-name-as-a-variable</a>). But I was not using it in a sql file, it was just part of my c# code. And I didn’t want to spend too much time on this. (<a href="https://stackoverflow.com/questions/3330343/c-sharp-sqlcommand-cannot-use-parameters-for-column-names-how-to-resolve">https://stackoverflow.com/questions/3330343/c-sharp-sqlcommand-cannot-use-parameters-for-column-names-how-to-resolve</a>)</p><p>I hardcoded the sql query to solve this as there were only two different tables.</p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lanhuacao (Orchid Grass)</title>
    <link href="/2022/08/20/Lanhuacao/"/>
    <url>/2022/08/20/Lanhuacao/</url>
    
    <content type="html"><![CDATA[<p>I have tried to write in English since I started to study at UBC.</p><p>But there was a time when I was waiting for offers from UBC and other schools. I shared one bed with my cousin in Shanghai and we would go to a random cafe each day after we woke up. Overly priced latte and americano brought us energy and joy, we can sit there all day long. </p><p>It was the best of times, it was the worst of times. It was nice that I got work done every day and didn’t have much time to think about the approaching graduation. It was also terrible as covid brought an ambiguous future to me, and all human beings. The news spread, I saw people die every day, and heartbroken stories happened every fucking single day. This kind of powerlessness is the worst thing ever. And I found no one to blame though the incompetent and bureaucratic government should act more effectively instead of claiming it was fake news and blocking all the source information. </p><p>As I buried myself in my entry-level code and deadlines to avoid depression, there was this particular song, Lanhuacao, which I played as background music a lot. While the name “Lanhuacao” simply referred to Orchid Grass, the lyric was surprisingly motivating. With the cliché theme of making a fortune from scratch, the songwriter used tons of allusions, metaphors, symbolism, and metonymy to make this song relatable to lots of Chinese people who work freakingly hard and want to provide a better life for their families. Besides the exquisite integration of famous poets and poems from different dynasties, the usage of ancient Chinese mythology and traditional Chinese cultural references constructed the vivid imagery of his struggle and hope. </p><p>My favorite lines are:</p><blockquote><p>宝骏踏断命里刺(The miracle horse trampled the thorns under my tread)</p><p>胭脂洒满暮光谷(The rouge sprinkled all over twilight valley)</p><p>他日若随凌云志(If my great ambitions come true one day)</p><p>敢笑黄巢不丈夫(Who dares to say that I am not a hero)</p></blockquote><p>And the most touching lines are definitely:</p><blockquote><p>博得明月出(On the day I make it)</p><p>用兰花换锦服(Trade in my orchid grass for the splendid clothing)</p></blockquote><p>Although I’m not a big fan of traditional Chinese culture because of the ubiquitous discrimination toward women and the strict social hierarchies based on oppression, I do appreciate the incomparable beauty that lies in those ancient Chinese poems.</p><p>I listened to this song when I accidentally started the final exam on Edx and had to spend 2 hours finishing the unprepared exam at 1 AM, when I wrote my thesis, when I finished the oral defense, when I sat in the car to the airport. These were the moments when I felt most anxious but also sensed hope. As Dickens once said, it was the spring of hope, it was the winter of despair. Sometimes when you feel the most painful, you gain something valuable. But sometimes pain is just meaningless. Like I don’t understand why some women have to experience the pain during their periods. </p><p>As is known to all (or maybe not), life is a journey full of emptiness. When you feel the pain, you are probably achieving something hard. So don’t feel too terrible about yourself. Climate change is coming but let’s pretend we have a future. And that’s the future with some hope, or the future with some tradable orchid grass, as the language of orchid grass is hope. </p><p><em>Note: Orchid grass probably should be called Asiatic dayflower. Unfortunately, I’m not a botanist who can tell the difference between these weird names. Call it what you want. It’s just a plant mentioned in a Chinese song.</em></p>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Songs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Project Hackathon</title>
    <link href="/2022/03/06/product-hackathon/"/>
    <url>/2022/03/06/product-hackathon/</url>
    
    <content type="html"><![CDATA[<p>I finished my first in-person hackathon today and I have so many feelings right now.</p><p>Just want to write them down to help me remember all the moments and moods.</p><h3 id="The-business-style"><a href="#The-business-style" class="headerlink" title="The business style"></a>The business style</h3><p>The team that won the top1 reward in our track has a real business style of solving problems. Their team and mine actually have rather similar thoughts. While we are trying to get everything super practical and with existed technology, they try to paint the blueprint of the whole project. It is seeing the way they solve the problem and the first boy’s excellent presentation skills that make me realize how different students in science and business are. It is very hard to say which one is better, but you can tell they think in so different ways.</p><h3 id="Nice-teammates"><a href="#Nice-teammates" class="headerlink" title="Nice teammates"></a>Nice teammates</h3><p>So I have really good teammates in this hackathon. Maddy, Ivy, and Ireena. Ireena covered all the AR&#x2F;VR thing and she totally nailed it. Maddy and I completed the figma stuff while Ivy made all the slides. All the discussions and finally came up with a thorough project. Although we didn’t win the top reward which is $500, I feel quite lucky to work with them. </p><p>Maddy borrowed me her clothes since I literally don’t have any clothes that could be called “business”. I had to arrive at her place at around 8:20 am so that we can get to school on time. So I got up at 7 am. That’s insanely early for me, since I haven’t got up that early for almost a whole year. But I made it. Good job meihui.</p><p>After the hackathon, I took a short walk with Maddy and her friends. We sat near the garden, talked about things in school, and felt the wind blow. The incoming midterms, the marathon they plan to run, and all the funny or stressful moments really make me relaxed for the first time in two days. It’s good to see the smile on their face LOL. And it’s very considerate that they will explain the background for me when they want to talk about something I may not know. Thanks Maddy, for the business clothes and your super nice friends haha.</p><h3 id="Sleep-on-the-grass"><a href="#Sleep-on-the-grass" class="headerlink" title="Sleep on the grass"></a>Sleep on the grass</h3><p>I want to sleep on the grass, it’s like a certain weird dream I always have. After we finished the presentation, Ivy, Maddy, and I took a walk around the building. Feeling too tired and stressed at that time, I just wanted to lay down. So they sat there watching people couple dancing, and I laid on the grass and closed my eyes. Along with sunlight on my face, I heard the distant dancing music, chirp, and people’s laughter and then gradually lost my consciousness. When I woke up, Ivy was still there waiting for me while Maddy was back earlier. It’s really comforting when you see someone is still waiting for you. Big thanks Ivy :)</p><p>It feels good to attend activities like this. It makes you realize the difference when people solve problems and make you enjoy the time working with friends. After we finished the schedule of the first day, we went to Ivy’s place to finish the remaining work and laughed for a long long time. I hope I can remember and cherish the precious moments. When Maddy said goodbye to me at the bus station, despite all the exhaustion, I felt the night wind on my face. This is how you want to live, good friends, planned but uncertain tomorrow, and the unfinished work.</p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hackathon</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Set a Mobile Table</title>
    <link href="/2022/01/23/Set-a-Mobile-Table/"/>
    <url>/2022/01/23/Set-a-Mobile-Table/</url>
    
    <content type="html"><![CDATA[<p>I’m building a book page for my blog. I decided to make it a table so that I can copy the information to excel if needed.</p><h3 id="1-Make-it-adaptive-for-mobile-devices"><a href="#1-Make-it-adaptive-for-mobile-devices" class="headerlink" title="1. Make it adaptive for mobile devices"></a>1. Make it adaptive for mobile devices</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Book Table<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;table-layout: fixed;&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: left;&quot;</span>&gt;</span>Book<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: left;&quot;</span>&gt;</span>Author<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: left;&quot;</span>&gt;</span>Rating<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: left;&quot;</span>&gt;</span>Comment<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: left;&quot;</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><br>……<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>We can set percentage of width for mobile devices. </p><p><code>&lt;table style=&quot;table-layout: fixed;&quot; border=&quot;1&quot; width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;2&quot;&gt;</code></p><p>For other devices, we can use fixed width.</p><p><code>&lt;table style=&quot;height: 125px;&quot; border=&quot;1&quot; width=&quot;640&quot; cellspacing=&quot;0&quot; cellpadding=&quot;2&quot;&gt;</code></p><h3 id="2-Make-the-columns-easy-to-copy"><a href="#2-Make-the-columns-easy-to-copy" class="headerlink" title="2. Make the columns easy to copy"></a>2. Make the columns easy to copy</h3><p>We can use <code>style=&quot;vnd.ms-excel.numberformat:@&quot;</code> in each <code>&lt;td&gt;</code> tag. </p><p>For example,<code>&lt;td style=&quot;vnd.ms-excel.numberformat:@&quot;&gt;The Daughter of Time&lt;/td&gt;</code>.</p><h3 id="3-Make-the-color-fits-both-day-and-night-modes"><a href="#3-Make-the-color-fits-both-day-and-night-modes" class="headerlink" title="3. Make the color fits both day and night modes"></a>3. Make the color fits both day and night modes</h3><p>I’m using white font for all fonts. So the table can only be seen in night mode. Still working on it.</p><p><code>&lt;table class=&quot;ui stackable responsive celled padded compact small table&quot; style=&quot;color:white; &quot; border=&quot;1&quot; width=&quot;100%&quot; cellspacing=&quot;0&quot;&gt;</code></p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>01.24 update</p><p>While <code>style=&quot;color:white; &quot;</code> could set the color of the text in the table, we need two modes based on the fluid theme.</p><p>I add the following function in <code>/blog/themes/fluid/source/js/color-schema.js</code>. And call this function in <code>applyCustomColorSchemaSettings()</code>.</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getTableColor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> colorTable = document.getElementById(<span class="hljs-string">&#x27;table1011&#x27;</span>); <span class="hljs-comment">//mine</span><br>    <span class="hljs-keyword">var</span> currentSetting = getLS(colorSchemaStorageKey); <span class="hljs-comment">// get current color setting</span><br>     <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(currentSetting);<br>     <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;running&quot;</span>); <span class="hljs-comment">// for testing</span><br>    <span class="hljs-comment">// when table exists</span><br>    <span class="hljs-keyword">if</span> (colorTable != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// when current setting is light</span><br>        <span class="hljs-keyword">if</span> (currentSetting == <span class="hljs-string">&quot;light&quot;</span>) &#123;<br>            colorTable.style.color = <span class="hljs-string">&quot;black&quot;</span>; <br>            colorTable.classList.remove(<span class="hljs-string">&quot;dark-table&quot;</span>);  <span class="hljs-comment">// remove dark mode tag</span><br>            colorTable.classList.add(<span class="hljs-string">&quot;day-table&quot;</span>);     <span class="hljs-comment">//  add light mode tag</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              colorTable.style.color = <span class="hljs-string">&quot;white&quot;</span>;<br>              colorTable.classList.remove(<span class="hljs-string">&quot;day-table&quot;</span>);<br>              colorTable.classList.add(<span class="hljs-string">&quot;dark-table&quot;</span>);<br>            &#125;              <br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>Then write a simple css file for light and dark modes.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.day-table</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#665d25</span>;<br>  <span class="hljs-attribute">text-decoration</span>:underline;<br>&#125;<br><br><span class="hljs-selector-class">.day-table</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">color</span>:  <span class="hljs-number">#8e916d</span>;<br>&#125;<br><br><br><span class="hljs-selector-class">.dark-table</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">color</span>:<span class="hljs-number">#C7EDCC</span>;<br>  <span class="hljs-attribute">text-decoration</span>:underline;<br>&#125;<br><br><span class="hljs-selector-class">.dark-table</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">color</span>:  <span class="hljs-number">#b6c29a</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Mission accomplished.</p><img src="https://s2.loli.net/2022/01/25/wmFyKLbWNTMe89a.png" style="zoom:50%;"/>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Notes of React 2</title>
    <link href="/2021/12/24/Notes-of-React-2/"/>
    <url>/2021/12/24/Notes-of-React-2/</url>
    
    <content type="html"><![CDATA[<p><a href="https://reactjs.org/">React ref</a></p><h3 id="4th-Set-JSDB"><a href="#4th-Set-JSDB" class="headerlink" title="4th Set JSDB"></a>4th Set JSDB</h3><h4 id="1-install-json-server"><a href="#1-install-json-server" class="headerlink" title="1. install json server"></a>1. install json server</h4><p>create a new folder</p><p>copy json file from GitHub</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">yarn <span class="hljs-keyword">add</span> <span class="hljs-type">json</span>-<span class="hljs-keyword">server</span><br>npx <span class="hljs-type">json</span>-<span class="hljs-keyword">server</span> <span class="hljs-comment">--watch db.json --port 3003 </span><br>// since we don<span class="hljs-string">&#x27;t have json setting file here, &#x27;</span>yarn <span class="hljs-keyword">start</span><span class="hljs-string">&#x27; may not be able to set the port</span><br></code></pre></td></tr></table></figure><h4 id="2-Add-API"><a href="#2-Add-API" class="headerlink" title="2. Add API"></a>2. Add API</h4><p>in products.js</p><p>Install axios</p><p><code>yarn add axios</code></p><p><code>import axios from &#39;axios&#39;;</code></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pf">import axios <span class="hljs-keyword">from</span> &#x27;commons/axios&#x27;;<br>    <br>    <span class="hljs-keyword">state</span> = &#123;<br>        products : [  <br>        ]<br>    &#125;  // <span class="hljs-built_in">set</span> <span class="hljs-keyword">state</span> empty so we can 重新渲染 later<br>    <br>    <br>    componentDidMount() &#123;<br>        axios.get(&#x27;/products&#x27;) // 已经配置好不用加prefix<br>        .then(response =&gt; this.<span class="hljs-built_in">set</span>State(&#123;<br>            products: response.data<br>        &#125;));<br>    &#125;<br></code></pre></td></tr></table></figure><p>new file in commons to set axios</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">import</span> _axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><br>const axios = <span class="hljs-function"><span class="hljs-params">(baseURL)</span> =&gt;</span> &#123;<br>  const instance = _axios.create(&#123;<br>    baseURL: baseURL || <span class="hljs-string">&quot;http://localhost:3003&quot;</span>,<br>    timeout: <span class="hljs-number">1000</span>,<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> instance;<br>&#125;;<br><br><span class="hljs-keyword">export</span> &#123; axios &#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> axios();<br><br></code></pre></td></tr></table></figure><h4 id="3-Search-Product"><a href="#3-Search-Product" class="headerlink" title="3. Search Product"></a>3. Search Product</h4><p>In toolbox.js, change text into controlled component</p><p>In Products.js, create search function (because search function is to filter all the products)</p><p>&#x2F;&#x2F; 1. Get New Array</p><p>&#x2F;&#x2F; 2. Filter New Array</p><p>用match搜索</p><p>&#x2F;&#x2F; 3. set State</p><p>得到新的products数组的值，重新渲染UI</p><h3 id="5th-Add-animation-effects-to-products"><a href="#5th-Add-animation-effects-to-products" class="headerlink" title="5th Add animation effects to products"></a>5th Add animation effects to products</h3><p>products wrapped by Transition Group (多个元素)</p><p>用CSSTransition包裹单个元素</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;CSSTransition classNames<span class="hljs-operator">=</span><span class="hljs-string">&quot;product-fade&quot;</span> timeout<span class="hljs-operator">=</span>&#123;<span class="hljs-number">300</span>&#125; key<span class="hljs-operator">=</span>&#123;p.id&#125;&gt; //classNames 是前缀，timeout是渐进时间，key是区分每个product<br></code></pre></td></tr></table></figure><h3 id="6th-POP-window"><a href="#6th-POP-window" class="headerlink" title="6th POP window"></a>6th POP window</h3><p>首先构建页面，然后添加ADD, EDIT, DELETE 功能 </p><p><a href="https://github.com/typicode/json-server">https://github.com/typicode/json-server</a> (json-server instruction)</p><p><img src="https://s2.loli.net/2021/12/25/xG9K2azV6isbEnI.png"></p><p>children component 调用父组件函数 button</p><p><img src="https://s2.loli.net/2021/12/25/Q2UMaLCpBtlx3kS.png"></p><p>构建表单，通过表单传递信息给API，重新渲染页面</p><p>构建可控组建：</p><p>新建</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">state</span> = &#123;<br>  name: <span class="hljs-string">&#x27;&#x27;</span>,<br>  price: <span class="hljs-string">&#x27;&#x27;</span>,<br>  tags: <span class="hljs-string">&#x27;&#x27;</span>,<br>  image: <span class="hljs-string">&#x27;&#x27;</span>,<br>  status: <span class="hljs-string">&#x27;available&#x27;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>然后新建</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">handleChange = e =&gt; &#123;<br>  <span class="hljs-keyword">const</span> value = e.<span class="hljs-keyword">target</span>.value;<br>  <span class="hljs-keyword">const</span> name = e.<span class="hljs-keyword">target</span>.name;<br>  <span class="hljs-keyword">this</span>.setState(&#123;<br>    [name]: value<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><p>然后绑定</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">&lt;textarea<br>  className=<span class="hljs-string">&quot;textarea&quot;</span><br>  name=<span class="hljs-string">&quot;name&quot;</span><br>  value=&#123;<span class="hljs-keyword">this</span>.state.name&#125;  <span class="hljs-comment">// 和state里面的attribute对应</span><br>  onChange=&#123;<span class="hljs-keyword">this</span>.handleChange&#125;<br>/&gt;<br></code></pre></td></tr></table></figure><p>用submit函数获取表单数据</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">submit = e =&gt; &#123;<br>  e.preventDefault(); <span class="hljs-comment">//阻止默认行为</span><br>  <span class="hljs-keyword">const</span> product = &#123; ...<span class="hljs-keyword">this</span>.state &#125;; <span class="hljs-comment">//获取state数据</span><br>  axios.post(<span class="hljs-string">&#x27;products&#x27;</span>, product).then(res =&gt; &#123;<br>    <span class="hljs-keyword">this</span>.props.close(res.<span class="hljs-keyword">data</span>);<br>    toast.success(<span class="hljs-string">&#x27;Add Success&#x27;</span>);<br>  &#125;); <span class="hljs-comment">//post方法提交到REST API</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>ToastContainer使用</p><p><a href="https://fkhadra.github.io/react-toastify/introduction">https://fkhadra.github.io/react-toastify/introduction</a></p><p>container在index.js导入，与Router同级，用一个div包裹</p><p>toast放在AddInventory.js</p><p>Edit Inventory</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript">https://developer.mozilla.org/en-US/docs/Web/JavaScript</a></p><p>similar to Addinventory, but need to put the existed info to the form</p><p>And write the update fuction in Products.js （为了实时更新）</p><p>first find the product we need to update (find index), and then update the product list and source list based on the changed info</p><p>子组件调用父组件可以通过参数传递</p><p>delete函数从products 传递到product</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pf">delete = id =&gt; &#123;<br>  <span class="hljs-keyword">const</span> _products = this.<span class="hljs-keyword">state</span>.products.filter(p =&gt; p.id !== id);<br>  <span class="hljs-keyword">const</span> _sProducts = this.<span class="hljs-keyword">state</span>.sourceProducts.filter(p =&gt; p.id !== id);<br>  this.<span class="hljs-built_in">set</span>State(&#123;<br>    products: _products,<br>    sourceProducts: _sProducts<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><p><code>&lt;Product product=&#123;p&#125; update=&#123;this.update&#125; delete=&#123;this.delete&#125;&gt;&lt;/Product&gt;</code> （已经传递给product组件）</p><p>从product传递到EditInventory</p><p>toEdit里props加一个<code>deleteProduct: this.props.delete</code></p><p>delete btn bind <code>onClick=&#123;this.onDelete&#125;</code> </p><h3 id="7th-Cart"><a href="#7th-Cart" class="headerlink" title="7th Cart"></a>7th Cart</h3><p>async function查找是否product已经在购物车里</p><p>状态提升，toolbox和product都是products的子组件，是兄弟组件，所以把state里面的cartNum 提高到父组件products进行处理。</p><h3 id="8th-JWT"><a href="#8th-JWT" class="headerlink" title="8th JWT"></a>8th JWT</h3><p>update </p><p><code>import useForm from &#39;react-hook-form&#39;;</code> </p><p>to</p><p><code>import &#123; useForm &#125; from &#39;react-hook-form&#39;;</code></p><p>update </p><p> <code>const &#123; register, handleSubmit, errors &#125; = useForm();</code> </p><p>to</p><p> <code>const &#123; register, handleSubmit, formState: &#123; errors &#125; &#125; = useForm();</code></p><h3 id="9th-Deploy"><a href="#9th-Deploy" class="headerlink" title="9th Deploy"></a>9th Deploy</h3><p>deploy on zeit.co</p><p>install now <code>sudo npm install -g now</code></p><p>connect your github account with zeit</p><p>change “scripts” in package.json to</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-string">&quot;serve --single ./build&quot;</span>, <span class="hljs-regexp">//</span>build目录下 单页面<br>    <span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;react-scripts start&quot;</span>,<br>    <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;react-scripts build&quot;</span>, <span class="hljs-regexp">//</span> 打包<br>    <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;react-scripts test&quot;</span>,<br>    <span class="hljs-string">&quot;eject&quot;</span>: <span class="hljs-string">&quot;react-scripts eject&quot;</span><br>  &#125;,<br></code></pre></td></tr></table></figure><p>install serve in vscode</p><p><code>yarn add serve</code></p><p>then</p><p><code>now</code></p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Transfer Hexo Blog from Windows to Mac</title>
    <link href="/2021/11/30/Transfer-Hexo-Blog-from-Windows-to-Mac/"/>
    <url>/2021/11/30/Transfer-Hexo-Blog-from-Windows-to-Mac/</url>
    
    <content type="html"><![CDATA[<p>My old laptop died last week after working for me for five years. And I bought a new M1 mac the next day. It is not hard to transfer hexo blog to a mac. The following are steps I take.</p><h3 id="Step-1-Install-git-node-and-hexo"><a href="#Step-1-Install-git-node-and-hexo" class="headerlink" title="Step 1 Install git, node and hexo"></a>Step 1 Install git, node and hexo</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>git<br><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>node<br>npm <span class="hljs-keyword">install </span>hexo g<br></code></pre></td></tr></table></figure><h3 id="Step-2-Initialize-a-hexo-folder"><a href="#Step-2-Initialize-a-hexo-folder" class="headerlink" title="Step 2 Initialize a hexo folder"></a>Step 2 Initialize a hexo folder</h3><p>Create a new folder for it and then call new terminal at folder with <code>hexo init</code> and <code>git init</code>.</p><p>Test the new folder with <code>hexo s</code>.</p><h3 id="Step-3-Download-your-old-hexo-post-themes-folders-and-config-yml"><a href="#Step-3-Download-your-old-hexo-post-themes-folders-and-config-yml" class="headerlink" title="Step 3 Download your old hexo _post, themes folders and _config.yml"></a>Step 3 Download your old hexo _post, themes folders and _config.yml</h3><p>I used google drive for this. Compress them and then download. Replace the ones with them.</p><h3 id="Step-4-Change-your-privilege-level"><a href="#Step-4-Change-your-privilege-level" class="headerlink" title="Step 4 Change your privilege level"></a>Step 4 Change your privilege level</h3><p>First get info of your blog folder, make sure you have privilege to write to it.</p><p>And then use <code>sudo chmod -R 777 testproject</code> to change the permission level of your project directory.</p><h3 id="Step-5-Configure-git-and-add-SSH"><a href="#Step-5-Configure-git-and-add-SSH" class="headerlink" title="Step 5 Configure git and add SSH"></a>Step 5 Configure git and add SSH</h3><p>If you have configured git before, ignore this step.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;username&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;email@gmail.com&quot;</span><br></code></pre></td></tr></table></figure><p>Then generate your SSH.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;email@gmail.com&quot;</span><br></code></pre></td></tr></table></figure><p>You can find the generated SSH in ~&#x2F;.ssh&#x2F;id_rsa.pub. </p><p>.ssh is a hidden folder. You can open it with <code>open ~/.ssh // </code>. Find id_rsa.pub there, and then add SSH to your GitHub account.</p><p>Or you can use <code>cat ~/.ssh/id_rsa.pub</code> to print the key and then copt it.</p><h3 id="Step-6-Deploy-your-blog"><a href="#Step-6-Deploy-your-blog" class="headerlink" title="Step 6 Deploy your blog"></a>Step 6 Deploy your blog</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>Input your github user name. As for the password, you should input your <strong>personal access code</strong> rather than your password anymore.</p><p>You can find more info about personal access code here. <a href="https://stackoverflow.com/questions/68775869/support-for-password-authentication-was-removed-please-use-a-personal-access-to">https://stackoverflow.com/questions/68775869/support-for-password-authentication-was-removed-please-use-a-personal-access-to</a></p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Notes of React</title>
    <link href="/2021/11/25/Notes-of-React/"/>
    <url>/2021/11/25/Notes-of-React/</url>
    
    <content type="html"><![CDATA[<p><a href="https://reactjs.org/">React ref</a></p><h3 id="1st-Create-React-File"><a href="#1st-Create-React-File" class="headerlink" title="1st Create React File"></a>1st Create React File</h3><ol><li>Online</li><li>Browser</li><li><code>create-react-app github</code></li></ol><p>npx is a command of npm which is a tool to manage packages in node.js</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">npx</span> <span class="hljs-built_in">create-react-app</span> <span class="hljs-string">react-store</span> <br><br><span class="hljs-string">cd</span> <span class="hljs-string">react-store</span>`<br><br><span class="hljs-string">npm</span> <span class="hljs-string">start</span>` <span class="hljs-string">or</span> `<span class="hljs-string">yarn</span> <span class="hljs-string">start</span><br></code></pre></td></tr></table></figure><p>localhost:3000</p><h3 id="2nd-Open-folder-in-VScode"><a href="#2nd-Open-folder-in-VScode" class="headerlink" title="2nd Open folder in VScode"></a>2nd Open folder in VScode</h3><p>package: dependencies &#x2F;&#x2F; environment configuration</p><p>node_modules: dependencies </p><p>public: static resources</p><h3 id="3rd-Start-to-Write-React-Program"><a href="#3rd-Start-to-Write-React-Program" class="headerlink" title="3rd Start to Write React Program"></a>3rd Start to Write React Program</h3><h4 id="1-Prepare"><a href="#1-Prepare" class="headerlink" title="1. Prepare"></a>1. Prepare</h4><p>delete original files under src and public</p><p>create <code>index.html</code> under public and <code>index.js</code> under src </p><h4 id="2-Write-your-first-JS-component-in-index-js"><a href="#2-Write-your-first-JS-component-in-index-js" class="headerlink" title="2. Write your first JS component in index.js"></a>2. Write your first JS component in index.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDom</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Login</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br><span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br> <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Login Component<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span>;<br>&#125;<br>&#125;<br><br><span class="hljs-title class_">ReactDom</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Login</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>)); <span class="hljs-comment">// render current component</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Login</span>; <span class="hljs-comment">// always add this to the end of the file if it is not in the same folder as index.js</span><br></code></pre></td></tr></table></figure><h4 id="3-JSX-with-HTML"><a href="#3-JSX-with-HTML" class="headerlink" title="3. JSX with HTML"></a>3. JSX with HTML</h4><p>With JSX, we could return HTML element directly.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> (<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>example<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span>  <span class="hljs-comment">//only one element</span><br>);<br>&#125;<br></code></pre></td></tr></table></figure><p>It actually tranforms the following format.</p><p> <code>React.createElement(&#39;p&#39;, &#123;classname: &#39;Login&#39;&#125;)</code></p><h4 id="4-Emmet-Settings"><a href="#4-Emmet-Settings" class="headerlink" title="4. Emmet Settings"></a>4. Emmet Settings</h4><p>Emmet is an extension that can help us write HTML component fast. We can edit its settings in <code>preferences-&gt;settings-&gt;Extensions-&gt; Emmet</code>. </p><p>Enable trigger on tab first. Then add javascript as a new key and javascriptreact as a value accordingly in the included languages. In this way, it would help us fill the html element we want to return once you press tab.</p><p><img src="https://i.loli.net/2021/12/01/2x7EDfcbBr6oZjC.png" alt="emmet1"></p><p>Also, shortcut for prettier is option + shift + f on Mac. </p><p>While for windows, it is alt + shift + f.</p><h4 id="5-Return-the-element-we-want"><a href="#5-Return-the-element-we-want" class="headerlink" title="5. Return the element we want"></a>5. Return the element we want</h4><p>We can only <strong>return one element each time</strong> with JSX. And we need to add a bracket when we use <code>render() &#123; return (&lt;p&gt;abc&lt;/p&gt;); &#125;</code> like this.</p><p>If we want to return multiple elements, we can use React.Fragment.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>  <span class="hljs-keyword">const</span> a = <span class="hljs-string">&#x27;JS code here&#x27;</span>;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.Fragment</span>&gt;</span></span><br><span class="language-xml">      &#123;a&#125; &#123;/* This would show &#x27;JS code here&#x27; */&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>abc<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>ttt<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">React.Fragment</span>&gt;</span></span><br>    );<br>&#125;<br></code></pre></td></tr></table></figure><p>In JSX, <strong>comment</strong> is like <code>&#123;/* comment */&#125;</code>and JS code should be like <code>&#123;js code&#125;</code>.</p><h4 id="6-Use-Bulma-template-to-beautify-our-component"><a href="#6-Use-Bulma-template-to-beautify-our-component" class="headerlink" title="6. Use Bulma template to beautify our component"></a>6. Use Bulma template to beautify our component</h4><p> Bulma is light-weighted and 100%responsive.</p><p>We can copy the login template there. Docs-&gt;Forms-&gt;general</p><p>Two ways to import Bulma: </p><ol><li><p>in index.html with CDN </p><p><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css&quot;&gt;</code></p></li><li><p>VScode command</p></li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">yarn add bulma<br>yarn add <span class="hljs-keyword">node</span><span class="hljs-title">-sass</span> // incompatible with M1 <span class="hljs-keyword">or</span> other <span class="hljs-keyword">version</span><br>npm install <span class="hljs-keyword">node</span><span class="hljs-title">-sass</span>@npm:sass // this one works<br></code></pre></td></tr></table></figure><p>Create a new folder named css under src. Add scss file. Scss is a grammar of sass (based on css).</p><p>import bulma in scss file.</p><p> <code>@import &#39;../../node_modules/bulma/bulma.sass&#39;;</code></p><p>Copy some css style from github. We can change the color of buttons and columns based on bulma website. Customize -&gt; color</p><p>Customized scss file and then  <code> import &quot;../css/app.scss&quot;;</code> in Login.js.</p><p>IF WE WANT TO USE SCSS FILE IN ALL FILES LATER, IMPORT THEM IN INDEX.JS.</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">import <span class="hljs-string">&quot;./css/app.scss&quot;</span><span class="hljs-comment">;</span><br>import <span class="hljs-string">&quot;./css/style.scss&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>Copy style and app scss files from GitHub.</p><h4 id="7-Create-App-js-with-Header-and-Products"><a href="#7-Create-App-js-with-Header-and-Products" class="headerlink" title="7. Create App.js with Header and Products"></a>7. Create App.js with Header and Products</h4><p>Write App.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Header</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Header&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Products</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Products&#x27;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Header</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Header</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Products</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Products</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><p>Write Header and Products templates with css earlier defined.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Header</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;grid&quot;</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;end&quot;</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>Login<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>Register<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Header</span>;<br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> <span class="hljs-type">React</span> from &#x27;react&#x27;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Products</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>    render() &#123;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div className=<span class="hljs-string">&quot;products&quot;</span>&gt;<br>                &lt;p&gt;<span class="hljs-type">Products</span>&lt;/p&gt;<br>            &lt;/div&gt;<br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-type">Products</span>;<br></code></pre></td></tr></table></figure><h4 id="8-Change-path-to-absolute-path"><a href="#8-Change-path-to-absolute-path" class="headerlink" title="8. Change path to absolute path"></a>8. Change path to absolute path</h4><p>In root menu, create a new file named <code>jsconfig.json</code>.</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br>    <span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;baseUrl&quot;</span>: <span class="hljs-string">&quot;src&quot;</span><br>    &#125;,<br><br>    <span class="hljs-string">&quot;include&quot;</span>: [<span class="hljs-string">&quot;src&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>In App.js, change import statements.</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">Header</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;components/Header&#x27;</span>;<br><span class="hljs-keyword">import</span> Products <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;components/Products&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="9-Use-props-to-pass-parameters"><a href="#9-Use-props-to-pass-parameters" class="headerlink" title="9. Use props to pass parameters"></a>9. Use props to pass parameters</h4><p>index:<code>&lt;header nickname=&quot;Admin&quot; /&gt;</code></p><p>header: <code>&lt;span.nickname&#123;this.props.nickname&#125; /&gt;</code></p><p>Use <code>renderLink() </code>to choose which element to show.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">renderLink</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> nickname = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">nickname</span>;<br>        <span class="hljs-keyword">if</span> (nickname) &#123;<br>            <span class="hljs-keyword">return</span> (<br>                <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;nickname&quot;</span>&gt;</span>&#123;this.props.nickname&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>            )<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> (<br>                <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.Fragment</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>Login<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>Register<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>    </span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">React.Fragment</span>&gt;</span></span><br>            )<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>Import fontawesome in app.sass to use icons.</p><h4 id="10-function-component"><a href="#10-function-component" class="headerlink" title="10. function component"></a>10. function component</h4><p> <code>const Header =&gt; props =&gt; ( return内容 html)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Header</span> = props =&gt; (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;grid&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;end&quot;</span>&gt;</span></span><br><span class="language-xml">        &#123;props.nickname ? (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;nickname&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;fas fa-user&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><br><span class="language-xml">            &#123;props.nickname&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        ) : (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">React.Fragment</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>Login<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>Register<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">React.Fragment</span>&gt;</span></span><br><span class="language-xml">        )&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Header</span>;<br><br></code></pre></td></tr></table></figure><h4 id="11-Use-React-Router-to-navigate"><a href="#11-Use-React-Router-to-navigate" class="headerlink" title="11. Use React Router to navigate"></a>11. Use React Router to navigate</h4><p>安装react router <code> yarn add react-router-dom</code></p><p>Create <code>Router.js</code> under <code>src</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">BrowserRouter</span>, <span class="hljs-title class_">Routes</span>, <span class="hljs-title class_">Route</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;components/App&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Login</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;components/Login&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">NotFound</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;components/NotFound&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Router</span> = (<span class="hljs-params"></span>) =&gt; (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">BrowserRouter</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Routes</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span> &lt;<span class="hljs-attr">App</span> /&gt;</span>&#125;&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/login&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Login</span> /&gt;</span>&#125;&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;*&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">NotFound</span> /&gt;</span>&#125;&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Routes</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">BrowserRouter</span>&gt;</span></span><br>);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Router</span>;<br><br></code></pre></td></tr></table></figure><p>change render in <code>index.js</code></p><p><code>ReactDom.render(&lt;Router /&gt;, document.getElementById(&quot;root&quot;));</code></p><h4 id="12-Event-listener-In-React"><a href="#12-Event-listener-In-React" class="headerlink" title="12. Event listener In React"></a>12. Event listener In React</h4><p>In HTML, we use onclike&#x3D;”string” to deal with</p><p>In React, it’s simiar but with js</p><p><img src="https://i.loli.net/2021/11/20/4lBc6wZtA2r1u7G.png" alt="微信截图_20211119165905"></p><p>onClick大写</p><h4 id="13-Bind-this"><a href="#13-Bind-this" class="headerlink" title="13. Bind this"></a>13. Bind this</h4><p>In some built-in functions like <code>render()</code> in React, we can use <code>this</code> to get the attributes we want directly. But in our self-defined functions, we need to bind this to get the object we want.</p><ol><li>bind(this) with onClick</li></ol><p><code>&lt;a href=&quot;/login&quot; className=&quot;button&quot; onClick=&#123;this.handleClick.bind(this)&#125;&gt; click this &lt;/a&gt; </code></p><ol start="2"><li>Or use arrow function, 但是容易导致子组件重新渲染</li></ol><p><img src="https://i.loli.net/2021/11/20/KqWpo6c3dMiCbRL.png" alt="微信截图_20211119231659"></p><ol start="3"><li>with constructor</li></ol><p><img src="https://i.loli.net/2021/11/20/t91Rk6ynTYDloah.png" alt="微信截图_20211119231943"></p><ol start="4"><li>use arrow function to bind directly</li></ol><p><img src="https://i.loli.net/2021/11/20/oGMuqJ38HzbplNs.png" alt="微信截图_20211119231959"></p><p>pass parameters</p><p><img src="https://i.loli.net/2021/11/20/cyLIz8gE5GMkQFP.jpg" alt="Inked微信截图_20211119232516_LI"></p><h4 id="14-Deal-with-form-data"><a href="#14-Deal-with-form-data" class="headerlink" title="14. Deal with form data"></a>14. Deal with form data</h4><p>first create ref, and then bind in input, get value by <code>current.value</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">  emailRef = React.createRef();<br>  passwordRef = React.createRef();  <br><br>handleSubmit = event =&gt; &#123;<br>    <span class="hljs-comment">// 1. 阻止默认实践行为</span><br>    event.preventDefault();<br>    <span class="hljs-comment">// 2. 获取表单数据</span><br>    <span class="hljs-keyword">const</span> formData = &#123;<br>      email : <span class="hljs-keyword">this</span>.emailRef.current.value,  <span class="hljs-comment">// 在底下input进行bind</span><br>      password: <span class="hljs-keyword">this</span>.passwordRef.current.value<br>    &#125;;<br>    console.log(formData);<br>    <span class="hljs-comment">// 3. 处理登录逻辑</span><br>    <span class="hljs-comment">// 4. 跳转到首页视图</span><br>    <span class="hljs-keyword">this</span>.props.history.push(<span class="hljs-string">&#x27;/&#x27;</span>);<br>  &#125;<br></code></pre></td></tr></table></figure><h4 id="15-State"><a href="#15-State" class="headerlink" title="15. State"></a>15. State</h4><p>We only need to update state to update the whle page.</p><p><code>constructor()</code> should add <code>super()</code> in it. <code>super(props)</code> refers to the parent class constructor. <a href="https://overreacted.io/why-do-we-write-super-props/">Link text Here</a></p><p>Because constructors of all components extending <code>React.Component</code> will need <code>super()</code> to be initialized. We use <code>this.props</code>to pass data among parent component and children components. <code>props</code> is a parameter that is used by parent component to pass data to children components.</p><p>Define a state:</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-keyword">state</span> = &#123;<br>isLike: false<br>&#125;;<br><br>handleClick = () =&gt; &#123;<br>this.<span class="hljs-built_in">set</span>State(&#123;<br>isLike: !this.<span class="hljs-keyword">state</span>.isLike<br>&#125;);<br>&#125;;<br><br><br><span class="hljs-variable">&lt;button className=&quot;button&quot; onClick=&#123;this.handleClick&#125;&gt;</span> &#123;this.<span class="hljs-keyword">state</span>.isLike ? &#x27;No&#x27; : &#x27;Yes&#x27;&#125;&lt;/button&gt;<br></code></pre></td></tr></table></figure><p>If we want to use the last updated state, we need a Callback</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">this.setState(<span class="hljs-function"><span class="hljs-params">prevState</span> =&gt;</span> &#123;<br><span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">count</span> : prevState.<span class="hljs-built_in">count</span> + <span class="hljs-number">2</span>&#125;;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="16-Controlled-Component-and-Uncontrolled-Component"><a href="#16-Controlled-Component-and-Uncontrolled-Component" class="headerlink" title="16. Controlled Component and Uncontrolled Component"></a>16. Controlled Component and Uncontrolled Component</h4><p>uncontrolled component: can only read the state</p><p>controlled component: can change the state of the component</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">state = &#123;<br>email : <span class="hljs-string">&#x27;&#x27;</span>,<br><span class="hljs-keyword">password</span> : <span class="hljs-string">&#x27;&#x27;</span><br>&#125;;<br><br>handleChange = e =&gt; &#123;<br>console.log(e.target.<span class="hljs-keyword">value</span>);   // <span class="hljs-keyword">get</span> the <span class="hljs-keyword">value</span><br>console.log(e.target.name);   // can deal <span class="hljs-keyword">with</span> two names<br>this.setState(&#123;<br>[e.target.name]: e.target.<span class="hljs-keyword">value</span>.toUpperCase()<br>&#125;);<br>&#125;;<br><br><br>&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">value</span>=&#123;this.state.email&#125; onChange=&#123;this.handleChange&#125; <span class="hljs-type">name</span>=&quot;email&quot; /&gt; // the <span class="hljs-type">name</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">input</span> should be the same <span class="hljs-keyword">as</span> the state<br>&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">value</span>=&#123;this.state.<span class="hljs-keyword">password</span>&#125; onChange=&#123;this.handleChange&#125; <span class="hljs-type">name</span>=&quot;password&quot; /&gt; // the <span class="hljs-type">name</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">input</span> should be the same <span class="hljs-keyword">as</span> the state<br></code></pre></td></tr></table></figure><p> Through this, we can get the form data (email and password).</p><h4 id="17-Component-Layout"><a href="#17-Component-Layout" class="headerlink" title="17. Component Layout"></a>17. Component Layout</h4><p>divide the page into two parts, toolbox and products.</p><p>create Toolbox.js and Product.js</p><p>SCSS could use Nested</p><h4 id="18-get-the-attribute-of-each-product"><a href="#18-get-the-attribute-of-each-product" class="headerlink" title="18. get the attribute of each product"></a>18. get the attribute of each product</h4><p>add attributes in <code>products.js</code></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">product</span>= &#123;<br>    name: <span class="hljs-string">&#x27;Air Jordon 4&#x27;</span>,<br>    image: <span class="hljs-string">&#x27;images/1.jpg&#x27;</span>,<br>    tags: <span class="hljs-string">&#x27;45 colors&#x27;</span>,       <br>    price : 59400,<br>    status: <span class="hljs-string">&#x27;available&#x27;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>Get those attributes in <code>product.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript">formatPrice = <span class="hljs-function"><span class="hljs-params">cents</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> (cents / <span class="hljs-number">100</span>).<span class="hljs-title function_">toLocaleString</span>(<span class="hljs-string">&#x27;zh&#x27;</span>, &#123;<br>      <span class="hljs-attr">style</span>: <span class="hljs-string">&#x27;currency&#x27;</span>,<br>      <span class="hljs-attr">currency</span>:<span class="hljs-string">&#x27;CAD&#x27;</span>,<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123;name, image, tags, price&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">product</span>;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;product&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;p-content&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;img-wrapper&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">figure</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;image is-4by3&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;image&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;name&#125;</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">figure</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;p-tags&quot;</span>&gt;</span>&#123;tags&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;p-name&quot;</span>&gt;</span>&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;p-footer&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;price&quot;</span>&gt;</span>&#123;this.formatPrice(price)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;add-cart&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;fas fa-shopping-cart&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;fas fa-exclamation&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>if we move formatPrice to another file, change <code>&lt;p className=&quot;price&quot;&gt;&#123;this.formatPrice(price)&#125;&lt;/p&gt;</code> to <code>&lt;p className=&quot;price&quot;&gt;&#123;formatPrice(price)&#125;&lt;/p&gt;</code></p><p>And use export in that file.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> formatPrice = cents =&gt; &#123;<br>    <span class="hljs-keyword">return</span> (cents / <span class="hljs-number">100</span>).toLocaleString(<span class="hljs-string">&#x27;zh&#x27;</span>, &#123;<br>      style: <span class="hljs-string">&#x27;currency&#x27;</span>,<br>      currency:<span class="hljs-string">&#x27;CAD&#x27;</span>,<br>    &#125;);<br>  &#125;<br></code></pre></td></tr></table></figure><h4 id="19-set-unavailable-products"><a href="#19-set-unavailable-products" class="headerlink" title="19. set unavailable products"></a>19. set unavailable products</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123;name, image, tags, price, status&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">product</span>;<br>    <span class="hljs-keyword">const</span> _pClass = &#123;<br>      <span class="hljs-attr">available</span>: <span class="hljs-string">&#x27;product&#x27;</span>,<br>      <span class="hljs-attr">unavailable</span>: <span class="hljs-string">&#x27;product out-stock&#x27;</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;_pClass[status]&#125;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;p-content&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;img-wrapper&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;out-stock-text&quot;</span>&gt;</span>Out Of Stock<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">figure</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;image is-4by3&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;image&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;name&#125;</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">figure</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;p-tags&quot;</span>&gt;</span>&#123;tags&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;p-name&quot;</span>&gt;</span>&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;p-footer&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;price&quot;</span>&gt;</span>&#123;formatPrice(price)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;add-cart&quot;</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;status</span> === <span class="hljs-string">&#x27;unavailable&#x27;</span>&#125;&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;fas fa-shopping-cart&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;fas fa-exclamation&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Blog Bookmarks</title>
    <link href="/2021/11/22/Blog-Bookmarks/"/>
    <url>/2021/11/22/Blog-Bookmarks/</url>
    
    <content type="html"><![CDATA[<p>This post is to list some interesting blogs or posts I somehow found.</p><h3 id="1-https-overreacted-io"><a href="#1-https-overreacted-io" class="headerlink" title="1. https://overreacted.io/"></a>1. <a href="https://overreacted.io/">https://overreacted.io/</a></h3><p>a blog about JavaScript</p><p>Easy to read, colors are delightful</p><p><img src="https://s2.loli.net/2021/12/27/hodVsk25uPGwvnU.png"></p><h3 id="2-https-www-gaficat-com"><a href="#2-https-www-gaficat-com" class="headerlink" title="2. https://www.gaficat.com/"></a>2. <a href="https://www.gaficat.com/">https://www.gaficat.com/</a></h3><p>use the same theme as I do</p><p>a guy’s random thoughts</p><p>homepage with variable welcome sentences</p><p><img src="https://s2.loli.net/2021/12/27/4j3nuAWzOyT6vhI.png"></p><h3 id="3-https-seekbetter-me"><a href="#3-https-seekbetter-me" class="headerlink" title="3. https://seekbetter.me/"></a>3. <a href="https://seekbetter.me/">https://seekbetter.me/</a></h3><p>gather excellent personal blogs</p><h3 id="4-https-www-ruanyifeng-com-blog"><a href="#4-https-www-ruanyifeng-com-blog" class="headerlink" title="4. https://www.ruanyifeng.com/blog/"></a>4. <a href="https://www.ruanyifeng.com/blog/">https://www.ruanyifeng.com/blog/</a></h3><p>Tech news blog</p><p><img src="https://s2.loli.net/2021/12/28/A9lcpaxh617JTPC.png"></p><h3 id="5-https-www-cylong-com"><a href="#5-https-www-cylong-com" class="headerlink" title="5. https://www.cylong.com/"></a>5. <a href="https://www.cylong.com/">https://www.cylong.com/</a></h3><p>better late than never</p><p><img src="https://s2.loli.net/2022/01/25/3PqW6OihIap4Eg8.png"></p><h3 id="6-https-skk-moe"><a href="#6-https-skk-moe" class="headerlink" title="6. https://skk.moe/"></a>6. <a href="https://skk.moe/">https://skk.moe/</a></h3><p>This guy helps build the drak mode of fluid.</p><p>Containing the beauty of simplicity, his blog also has good content worth reading. Especially the one about dark mode design. <a href="https://blog.skk.moe/post/hello-darkmode-my-old-friend/">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a></p><p>You can see the petience and time he spent there.</p><p><img src="https://s2.loli.net/2022/01/25/Z7MIla9SHGLPnqo.png"></p><p><img src="https://s2.loli.net/2022/01/25/wmLpl9acWQ5IktJ.png"></p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Steps to Deploy a Springboot Program</title>
    <link href="/2021/11/18/Steps-to-Deploy-a-Springboot-Program/"/>
    <url>/2021/11/18/Steps-to-Deploy-a-Springboot-Program/</url>
    
    <content type="html"><![CDATA[<h2 id="Deploy-a-springboot-blog"><a href="#Deploy-a-springboot-blog" class="headerlink" title="Deploy a springboot blog"></a>Deploy a springboot blog</h2><h3 id="0-Intro"><a href="#0-Intro" class="headerlink" title="0. Intro"></a>0. Intro</h3><p>项目本身技术栈比较简单</p><ul><li>javaweb</li><li>mysql</li><li>maven</li><li>springboot</li></ul><p>部署思路就是直接将项目打包至云服务器运行，服务器端只需要安装<code>jdk</code>和<code>mysql</code></p><h3 id="1-Install-environment"><a href="#1-Install-environment" class="headerlink" title="1. Install environment"></a>1. Install environment</h3><p><code>java</code>环境<br><code># yum install -y java-1.8.0-openjdk.x86_64</code></p><p><code>mysql</code>环境<br>在官网<a href="https://dev.mysql.com/downloads/file/?id=506384">下载</a>最新的<code>MySQL8.0</code>，由于<code>mysql</code>的<code>rpm</code>包的安装位置都是固定的，所以可以将下载好的包上传到云服务器上的任意位置。<br>解压并安装后，配置并允许<code>mysql</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">tar -vxf mysql-8.0.26-1.el8.x86_64.rpm-bundle.tar</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">rpm -ivh mysql-community-common-8.0.26-1.el8.x86_64.rpm mysql-community-client-plugins-8.0.26-1.el8.x86_64.rpm mysql-community-libs-8.0.26-1.el8.x86_64.rpm mysql-community-client-8.0.26-1.el8.x86_64.rpm mysql-community-server-8.0.26-1.el8.x86_64.rpm</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">vim /etc/my.cnf <span class="hljs-comment">#进入后在[mysqld]下粘贴对应内容，并添加[client]以及对应配置</span></span><br>~ [mysqld]<br>~ port=3306<br>~ character_set_server=utf8mb4<br>~ default_storage_engine=InnoDB<br>~ max_connections=151<br>~ max_connect_errors=10<br>~ default_authentication_plugin=mysql_native_password<br>~ skip_ssl<br>~ default_time_zone=&#x27;+8:00&#x27;<br>~ [client]<br>~ port=3306<br>~ default_character_set=utf8mb4<br><span class="hljs-meta prompt_"># </span><span class="language-bash">mysqld --initialize-insecure</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">chown</span> mysql:mysql -R /var/lib/mysql</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl start mysqld</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">mysql -uroot -p <span class="hljs-comment">#此处回车后要求输入密码直接回车即可。</span></span><br><span class="hljs-meta prompt_">mysql# </span><span class="language-bash">alter user <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span> password expire never;</span><br><span class="hljs-meta prompt_">mysql# </span><span class="language-bash">use mysql</span><br><span class="hljs-meta prompt_">mysql# </span><span class="language-bash">update user <span class="hljs-built_in">set</span> host=<span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-built_in">where</span> user = <span class="hljs-string">&#x27;root&#x27;</span>;</span><br><span class="hljs-meta prompt_">mysql# </span><span class="language-bash">quit</span><br></code></pre></td></tr></table></figure><h3 id="2-Start-the-program"><a href="#2-Start-the-program" class="headerlink" title="2. Start the program"></a>2. Start the program</h3><p>在本机<code>idea</code>中，右边栏目中点击<code>Maven</code>，然后<code>lifecycle</code>点击<code>package</code>,此时项目下的<code>target</code>文件夹下会产生项目<code>jar</code>包，提前在云服务器的适当位置创建该项目文件夹，并把包上传其中。</p><p>后台运行项目，并产生运行日志。</p><p><code>cd blog //注意在blog文件里运行下面的语句才有用</code></p><p><code>nohup java -jar blog-0.0.1-SNAPSHOT.jar &gt; /home/ec2-user/blog.log 2&gt;&amp;1 &amp;</code></p><p><code>netstat -ntlp // 监控所有端口</code></p><h3 id="3-End"><a href="#3-End" class="headerlink" title="3. End"></a>3. End</h3><p>此时直接访问<code>ip:port</code>即可访问到自己的项目，比如我们部署在8080端口上，则访问<code>x.x.x.x:8080</code>。</p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Deploy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Solutions to AWS problems</title>
    <link href="/2021/11/16/Solutions-to-AWS-problems/"/>
    <url>/2021/11/16/Solutions-to-AWS-problems/</url>
    
    <content type="html"><![CDATA[<h3 id="1-get-root-privilege"><a href="#1-get-root-privilege" class="headerlink" title="1. get root privilege"></a>1. get root privilege</h3><p>   <code>sudo password root</code></p><p>   <code>su root</code></p><p>   之后输入root密码后就可以使用</p><p>参考链接：<a href="https://www.bbsmax.com/A/MyJxvE7Vdn/">https://www.bbsmax.com/A/MyJxvE7Vdn/</a></p><h3 id="2-connect-local-host"><a href="#2-connect-local-host" class="headerlink" title="2. connect local host"></a>2. connect local host</h3><p>   用Xshell的时候直接用密钥连接，不需要再type密码，不然可能会报不必要的错</p><h3 id="3-mysql安装没有root密码"><a href="#3-mysql安装没有root密码" class="headerlink" title="3. mysql安装没有root密码"></a>3. mysql安装没有root密码</h3><p>卸载mysql <a href="https://medium.com/@srikar.appal/uninstall-mysql-from-ec2-6910c4597c6c">https://medium.com/@srikar.appal/uninstall-mysql-from-ec2-6910c4597c6c</a></p><p>重新安装并获取密码 <a href="https://asvignesh.in/install-mysql-on-amazon-linux-in-aws-ec2/">https://asvignesh.in/install-mysql-on-amazon-linux-in-aws-ec2/</a></p><p><code>sudo grep &#39;temporary password&#39; /var/log/mysqld.log</code></p><h3 id="4-ec2-mysql-连接navicat"><a href="#4-ec2-mysql-连接navicat" class="headerlink" title="4. ec2 mysql 连接navicat"></a>4. ec2 mysql 连接navicat</h3><ol><li><p>首先 localhost采用EC2的<strong>公有 IPv4 地址</strong>而不是私有 IPv4 地址。</p><p><img src="https://i.loli.net/2021/11/18/8Rlq1jyvudgANJG.png" alt="微信截图_20211118020037"></p><p><img src="https://i.loli.net/2021/11/18/CdGUWE4aJIuhFVQ.png" alt="微信截图_20211118020549"></p></li><li><p>其次AWS的security group要添加相应的入站规则。3306是mysql的默认端口，底下的22是remote连接用的。</p><p><img src="https://i.loli.net/2021/11/18/ytLcAfOPwgdxQTM.png" alt="微信截图_20211118020722"></p></li><li><p>最后windows防火墙入站规则要添加3306port。</p></li></ol><p><a href="https://blog.csdn.net/yj19961126/article/details/81224107">https://blog.csdn.net/yj19961126/article/details/81224107</a></p><p>以上是前期注意事项。</p><p>mysql的root是默认不允许远程访问的。首先创建一个新用户来实现远程访问。%代表可以被所有源访问。</p><p><code>CREATE USER &#39;aaa&#39;@&#39;%&#39; IDENTIFIED BY &#39;password&#39;;</code></p><p>授予权限</p><p><code>GRANT ALL PRIVILEGES ON db_name.* TO &#39;aaa&#39;@&#39;%&#39; WITH GRANT OPTION;</code></p><p>刷新权限</p><p><code>flush privileges;</code></p><p>尝试连接，如果不行再使用如下语句：</p><p><code>ALTER USER &#39;aaa&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;passwrod&#39;;</code></p><p>再次刷新权限</p><p><code>flush privileges;</code></p><p><img src="https://i.loli.net/2021/11/18/3OCXyt12G4RmMFv.png" alt="微信截图_20211118022033"></p><p>参考链接：<a href="https://stackoverflow.com/questions/50093144/mysql-8-0-client-does-not-support-authentication-protocol-requested-by-server">https://stackoverflow.com/questions/50093144/mysql-8-0-client-does-not-support-authentication-protocol-requested-by-server</a></p><p>如果还是没有连接成功，确认一下mysql的端口是否绑定在0.0.0.0。</p><p><code>netstat -anp|grep 3306</code></p><p><img src="https://i.loli.net/2021/11/18/ifwy1MnxjWABQL7.png" alt="微信截图_20211118022628"></p><p>如果是127.0.0.1，更改bind-addrss。</p><p><a href="https://stackoverflow.com/questions/9766014/connect-to-mysql-on-amazon-ec2-from-a-remote-server">https://stackoverflow.com/questions/9766014/connect-to-mysql-on-amazon-ec2-from-a-remote-server</a></p><h3 id="5-配置java版本"><a href="#5-配置java版本" class="headerlink" title="5. 配置java版本"></a>5. 配置java版本</h3><p><code>sudo alternatives --config java</code></p><h3 id="6-打开EC2端口"><a href="#6-打开EC2端口" class="headerlink" title="6. 打开EC2端口"></a>6. 打开EC2端口</h3><p>在安全设置打开EC2对应的安全组，添加入站规则。打开3306端口，http端口和3389端口。如果你的网址还是无法ping通，打开ICMP规则。</p><p><img src="https://i.loli.net/2021/11/19/zFZOdHWrVU51fEg.png" alt="微信截图_20211118153231"></p><h3 id="7-查看防火墙"><a href="#7-查看防火墙" class="headerlink" title="7. 查看防火墙"></a>7. 查看防火墙</h3><p><a href="https://cloud.tencent.com/document/product/213/14639">https://cloud.tencent.com/document/product/213/14639</a></p><p>进入root查看防火墙规则，腾讯云和AWS操作是一样的。可以参考。</p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AWS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>My keyboard log</title>
    <link href="/2021/10/21/My-keyboard-log/"/>
    <url>/2021/10/21/My-keyboard-log/</url>
    
    <content type="html"><![CDATA[<p>I became interested in the keyboard when I was writing my graduation thesis at home during the epidemic last year. At that time, I had to communicate with my classmates and teachers about the progress of the paper on WeChat every day, as well as crazy codewords, so I started watching the video of the keyboard.</p><h2 id="Mechanical-Keyboard"><a href="#Mechanical-Keyboard" class="headerlink" title="Mechanical Keyboard"></a>Mechanical Keyboard</h2><h3 id="1-Apex-Pro"><a href="#1-Apex-Pro" class="headerlink" title="1. Apex Pro"></a>1. Apex Pro</h3><p>My first keyboard was <em><strong>Apex Pro</strong></em> which I bought on JD.com. It took me 1,800 RMB with three- year of quality insurance. This keyboard has <strong>OmniPoint adjustable switches</strong> independently developed by SteelSeries, which allows you to <strong>customize the actuation distance</strong> by yourself. There is also a small <strong>smart OLED screen</strong> at the top right of the keyboard where you can customize the icon. With the driver of SteelSeries, you could change the RGB lighting mode and there are quite a lot of them. It is actually a very good keyboard to use, but the keycaps are made of abs material. It only took a week for the keycaps to lose their texture and begin to “shine”.</p><p><img src="https://i.loli.net/2021/10/22/NiFsckUpLwqY3XJ.jpg" alt="apexpro"></p><h3 id="2-Ducky-One-2-Mini"><a href="#2-Ducky-One-2-Mini" class="headerlink" title="2. Ducky One 2 Mini"></a>2. Ducky One 2 Mini</h3><p><em><strong>Ducky One 2 Mini</strong></em> is a 60% small keyboard with no arrow keys. At that time I didn’t know how important the arrow keys were to me, and I was interested in the small layout keyboard. Before buying it, I compared it with <em>Anne Pro 2</em>. Although <em>Anne Pro 2</em> has wireless mode and seems lighter in weight, I prefer <em>Ducky One 2 Mini</em> in appearance. However when I bought this small keyboard with Cherry blue switches, I found it very unsuitable for writing essays. I then changed the keycaps to Crisis by Domikey with SA height which was another mistake. Although the keycaps look very cool, SA height with Cherry blue will make your fingers exhausted and get tired of typing just in one day.</p><p><img src="https://i.loli.net/2021/10/22/siYHnL3MmtoqypN.jpg" alt="Ducky One 2 mini with Domikey Crisis"></p><h2 id="Customized-Keyboard"><a href="#Customized-Keyboard" class="headerlink" title="Customized Keyboard"></a>Customized Keyboard</h2><h3 id="3-Comb-65"><a href="#3-Comb-65" class="headerlink" title="3. Comb 65"></a>3. Comb 65</h3><p>My third keyboard, named <em><strong>Comb 65</strong></em>, is also my first customized keyboard. It looks a bit similar to <em>Think 6.5</em> designed by Gray Studio, but it is made of acrylic, which looks a bit cheaper. This is a <strong>hot-swappable</strong> keyboard, so no soldering is required. And unlike most customized keyboards, this is a stock keyboard, so I don’t need to wait too long. As for the switches and keycps, I bought the <strong>Gateron stabilizer set</strong>, <strong>Gateron Yellow switches</strong> and <strong>GMK Oblivion keycap set</strong> which is the most expensive keycap set I’ve ever had. The typing experience is very good as an entry-level keyboard.</p><p><img src="https://i.loli.net/2021/10/22/RqbZlmuDLAhn7WI.jpg" alt="Comb65"></p><p><img src="https://i.loli.net/2021/10/22/MJ4d9B1rRIZDb82.jpg" alt="back of Comb65"></p><h3 id="4-Monon-se"><a href="#4-Monon-se" class="headerlink" title="4. Monon se"></a>4. Monon se</h3><p><em><strong>Monon se</strong></em> is an aluminum keyboard. I bought this fully assembled keyboard with <strong>Gateron Tiffany switches</strong> and a <strong>Gateron transparent stabilizers</strong> from someone else. The Gateron transparent stabilizers are the worst  stabilizers set I’ve ever used. Although the price of the transparent stabilizer set is close to 200 RMB, the wires would drop as soon as you remove the keycap on it. I really hate this stabilizer set. However, the Tiffany switch is very smooth with pleasant typing sound. It’s definitely worth the price.</p><p><img src="https://i.loli.net/2021/10/22/H8Ds4UXECATzpMb.jpg" alt="Monon se + Key creative keycap set"></p><h3 id="5-7-Monon-r2"><a href="#5-7-Monon-r2" class="headerlink" title="5 -7. Monon r2"></a>5 -7. Monon r2</h3><p>The fifth, sixth, and seventh of my keyboards are all <em><strong>Monon r2</strong></em>. Because all keyboards in this studio are in stock, I bought a lot to avoid waiting. One is made of PC, the other two are made of aluminum (one is for soldering and the other is hot-swappable). I can’t remember the exact price but it seemed that I spent 1200 RMB for each keyboard including keycap set, switches and all necessary accessories. This is the first keyboard I soldered myself, and it’s still very fulfilling. </p><p><img src="https://i.loli.net/2021/10/22/ycgaHS43NJ1ProK.jpg" alt="PC+Key Creative"></p><p><img src="https://i.loli.net/2021/10/22/vSV3yC6gT2lcQ7L.jpg" alt="aluminum Monon r2 + GMK Oblivion"></p><p><img src="https://i.loli.net/2021/10/22/PdlF3GUTqQgvcmz.jpg" alt="aluminum Monon r2 + Pikachu keycap set"></p><h3 id="8-Vega"><a href="#8-Vega" class="headerlink" title="8. Vega"></a>8. Vega</h3><p>My eighth keyboard, <em><strong>Vega</strong></em>, is also my favorite keyboard. My fateful Vega. With creative <strong>gasket structure</strong>, it is considered to be one of the best top-level customized keyboards. With <strong>soft typing feeling</strong> and <strong>great typing sounds</strong>, this <strong>well-designed</strong> keyboard provided me with excellent typing experience. The name of it, Vega, is also meaningful, both in Chinese and English. I waited for it for five months. And when I finally opened the its box, it felt like my lost wife had finally arrived home. I used the <strong>alpaca switch</strong> from Kevin and Ai03 to match my favorite keyboard. Because I was too lazy at that time, I skipped adding switch films and lubrication. But these can not affect the excellent performance of Vega. I swear she’s the best ever.</p><p>The predecessor of Vega is the <em><strong>Polaris</strong></em> designed by Ai03, which is a keyboard with gasket structure and hhkb layout. Polaris was too expensive for me to afford when I tried to buy one. Instead, I bought Vega for 2499 RMB along with 5-month waiting. Surely, Vega itself can cure everything.</p><p><img src="https://i.loli.net/2021/10/22/gxD89ZfKqLjoyU7.jpg" alt="Vega + artkey Bull + JTK Vostok 1"></p><p><img src="https://s2.loli.net/2021/12/04/1OpQz9ulaDLr7xY.jpg"></p><p><img src="https://s2.loli.net/2021/12/04/H1mizJqYAIDkcwr.jpg"></p><p><img src="https://s2.loli.net/2021/12/04/dJDhjXEk493FPta.jpg"></p><h3 id="9-Space65-r2"><a href="#9-Space65-r2" class="headerlink" title="9. Space65 r2"></a>9. Space65 r2</h3><p>The ninth keyboard of mine is <em><strong>Space65 r2</strong></em> from <strong>Gray Studio</strong>. Strictly speaking, <strong>Space65</strong> <strong>r1</strong> is the first customized keyboard I’m interested in. So I always want to try it. Due to the high price of Space65 r1 in the second hand market, I switched to Space65 r2. In fact, having used it for a week, I’m a little disappointed about the typing experience of Space65 r2. But it looks really cool. And that would be worth it.</p><p><img src="https://i.loli.net/2021/10/22/O4CbjwLS62hKE7n.jpg" alt="Space65 r2 + JTK Vostok 1"></p><h3 id="10-Primus-75"><a href="#10-Primus-75" class="headerlink" title="10. Primus 75"></a>10. Primus 75</h3><p>This is my first 75% keyboard and it is from Nexus Studio. Before I bought it, I experienced keyboard burnout. I bought it for two reasons, one is that its back design looks like a CPU and is rather cool. The other reason is that the studio named Nexus reminded me of my first mobile phone Nexus 6p. I went to an HK website to buy it with 64G storage at a price of 3,000 Yuan. You could install different frameworks to it and have different experiences with them. The one I remembered is Xposed. I think it is also the most used one.</p><p>The color of it is white and pink as well as the switches and satellite set I used. A beautiful keyboard with delighful typing experience. Just enjoy the beauty and functionality.</p><p><img src="https://s2.loli.net/2021/12/04/42nKSqoF3bUhTle.png"></p><p><img src="https://s2.loli.net/2021/12/04/X345VWraFzwNjHo.png"></p><p><img src="https://s2.loli.net/2021/12/04/9CdFEGVizpmvL8R.png"></p><p><img src="https://s2.loli.net/2021/12/04/qH6SWCvRLIhAyGD.jpg"></p><h3 id="11-Matrix-falcon"><a href="#11-Matrix-falcon" class="headerlink" title="11. Matrix falcon"></a>11. Matrix falcon</h3><p>My last keyboard before I went abroad. With Cream switch and Enjoypbt keycaps. HHKB is really my favorite layout. Hope I got chance to use more fun keyboards. Hoep my obsession with keyboard can last longer.</p><p><img src="https://s2.loli.net/2021/12/04/aOvcwWZ2NLCeGJP.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Keyboard</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
